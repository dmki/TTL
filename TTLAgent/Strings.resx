<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CMD_1" xml:space="preserve">
    <value>Entering Command Line mode. Enter your command, then press ENTER.</value>
  </data>
  <data name="CMD_2" xml:space="preserve">
    <value>Type ? or HELP for help. Empty command line means exit.</value>
  </data>
  <data name="Copyright" xml:space="preserve">
    <value>©2016 - {0}. Dmitry Kirsanov. https://kirsanov.net</value>
  </data>
  <data name="EventLogPrepFailed" xml:space="preserve">
    <value>Event Log could not be prepared. Ensure you have admin privileges.</value>
  </data>
  <data name="Event_Log_prepared" xml:space="preserve">
    <value>Event Log prepared OK.</value>
  </data>
  <data name="HelpCMD" xml:space="preserve">
    <value>Available commands:
? or help - show this screen
exit or just [ENTER] - quit this program
local [ON/OFF] - switch between direct (local) and web service access</value>
  </data>
  <data name="InvalidCommand" xml:space="preserve">
    <value>Invalid command</value>
  </data>
  <data name="ParamList" xml:space="preserve">
    <value>ttl.exe [target file or dir] [parameters]
Example: ttl.exe c:\temp\t60 /days:60 /noempty /recycle /subs /v

Parameters:

/bfg		Alternate secure deletion - very fast, but less secure.
/ede		Ensure Directory Exists - if target directory does not exist, it will be created.
/days:[x]	Files / directories should be X days old. That's modification or creation time, whichever is latest.
/freespace:[X]	Only perform this operation, if free space in target drive falls below X Gb.
/keep:[number of files]	Delete old files, but keep this many alive even if they are old IN EVERY SUBDIRECTORY. Newest files will be preserved.
/mask:[file mask]	Only process files with this mask. E.g. *.txt means text files. You can separate multiple masks by comma.
/noempty		Delete empty sub-directories.
/recycle	Delete to recycle bin.
/compress	Compress files using NTFS compression instead of deleting
/rmdir		Delete directory itself, with all contents. Otherwise only files will be deleted.
/secure		Securely delete files - slow but secure.
/subs		Delete files in sub-directories.
/test		Test mode (do not delete anything).

Additional parameters:

/v - Verbose mode. Print informational messages.
/q - Quiet mode. All messages will be printed to Event Log.
/log - Prepare Event Log. This should be normally used just once, using Run As Administrator.
/y - Disable prompts (active by default with /s switch).
/? -? or --help	- Display this information.</value>
  </data>
  <data name="SilentVerboseConflict" xml:space="preserve">
    <value>Both Verbose and Silent modes selected. Therefore, Silent mode switched off.</value>
  </data>
</root>